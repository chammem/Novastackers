name: CI/CD Pipeline

on:
  push:
    branches: [main, sinda]
  pull_request:
    branches: [main]

env:
  # ⚠️ ATTENTION : Ces informations seront visibles dans les logs publics
  SONAR_HOST: "https://sonarcloud.io"
  SONAR_ORG: "chammem"
  BACKEND_KEY: "sustainafood_backend"
  FRONTEND_KEY: "sustainafood_frontend"
  SONAR_TOKEN: "4b75a0fef4c5ae5bd4b40ba192666a31aeac6853" # ⚠️ Token exposé
  DOCKER_USERNAME: "sinda12"
  DOCKER_REPO_BACKEND: "sustainafood-backend"
  DOCKER_REPO_FRONTEND: "sustainafood-frontend"
  DOCKER_REPO_FLASK: "sustainafood-flask"

jobs:
  versioning:
    name: Increment Shared Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Out Target Branch
        run: |
          git fetch origin sinda
          git checkout sinda

      - name: Get Current Version
        id: set-version
        run: |
          VERSION_FILE=shared-version.txt
          if [ ! -f "$VERSION_FILE" ]; then
            echo "1.0.0" > $VERSION_FILE
          fi
          VERSION=$(cat $VERSION_FILE)
          echo "Current version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Display Version
        run: echo "Using version ${{ steps.set-version.outputs.version }}"

  backend:
    name: Backend Analysis
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch Latest Changes
        run: git fetch origin

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: SustainaFoodBack
        run: npm install --force

      - name: Run tests with coverage
        working-directory: SustainaFoodBack
        run: npm run test:coverage

      - name: Create SonarCloud Project (Backend)
        run: |
          curl -X POST "$SONAR_HOST/api/projects/create" \
            -u "$SONAR_TOKEN:" \
            -d "project=$BACKEND_KEY&name=SustainaFood+Backend&organization=$SONAR_ORG" \
            || echo "Le projet existe peut-être déjà"

      - name: SonarCloud Scan (Backend)
        working-directory: SustainaFoodBack
        run: |
          npx sonarqube-scanner \
            -Dsonar.organization=$SONAR_ORG \
            -Dsonar.projectKey=$BACKEND_KEY \
            -Dsonar.host.url=$SONAR_HOST \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.scm.disabled=true

      - name: Log in to Docker Hub
        run: echo "cindaa123." | docker login -u "sinda12" --password-stdin

      - name: Build and Push Docker Image (Backend)
        working-directory: SustainaFoodBack
        run: |
          docker build -t $DOCKER_USERNAME/$DOCKER_REPO_BACKEND:${{ needs.versioning.outputs.version }} .
          docker push $DOCKER_USERNAME/$DOCKER_REPO_BACKEND:${{ needs.versioning.outputs.version }}

  frontend:
    name: Frontend Analysis
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch Latest Changes
        run: git fetch origin

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: SustainaFoodFront
        run: npm install --force

      - name: Run tests with coverage
        working-directory: SustainaFoodFront
        run: npm test -- --coverage --watchAll=false

      - name: Create SonarCloud Project (Frontend)
        run: |
          curl -X POST "$SONAR_HOST/api/projects/create" \
            -u "$SONAR_TOKEN:" \
            -d "project=$FRONTEND_KEY&name=SustainaFood+Frontend&organization=$SONAR_ORG" \
            || echo "Le projet existe peut-être déjà"

      - name: SonarCloud Scan (Frontend)
        working-directory: SustainaFoodFront
        run: |
          npx sonarqube-scanner \
            -Dsonar.organization=$SONAR_ORG \
            -Dsonar.projectKey=$FRONTEND_KEY \
            -Dsonar.host.url=$SONAR_HOST \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.exclusions=**/node_modules/**,**/build/** \
            -Dsonar.scm.disabled=true

      - name: Log in to Docker Hub
        run: echo "cindaa123." | docker login -u "sinda12" --password-stdin

      - name: Build and Push Docker Image (Frontend)
        working-directory: SustainaFoodFront
        run: |
          docker build -t $DOCKER_USERNAME/$DOCKER_REPO_FRONTEND:${{ needs.versioning.outputs.version }} .
          docker push $DOCKER_USERNAME/$DOCKER_REPO_FRONTEND:${{ needs.versioning.outputs.version }}

  flask:
    name: Flask Service Build and Push
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        run: echo "cindaa123." | docker login -u "sinda12" --password-stdin

      - name: Build and Push Docker Image (Flask)
        working-directory: RecommendationModel
        run: |
          docker build -t $DOCKER_USERNAME/$DOCKER_REPO_FLASK:${{ needs.versioning.outputs.version }} .
          docker push $DOCKER_USERNAME/$DOCKER_REPO_FLASK:${{ needs.versioning.outputs.version }}

  finalize:
    name: Finalize and Deploy
    needs: [backend, frontend, flask]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get Version from File
        id: get-version
        run: |
          VERSION=$(cat shared-version.txt)
          echo "Version from file: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Check Nexus Docker Registry Status
        run: |
          # Verify the Nexus server is reachable
          curl -s -o /dev/null -w "%{http_code}" https://2dfc-197-20-41-204.ngrok-free.app || echo "Nexus server not reachable"
          
          # Try both possible registry endpoints
          curl -s -o /dev/null -w "%{http_code}" https://2dfc-197-20-41-204.ngrok-free.app:8082/v2/ || echo "Docker registry API not found on port 8082"
          curl -s -o /dev/null -w "%{http_code}" https://2dfc-197-20-41-204.ngrok-free.app/v2/ || echo "Docker registry API not found on default port"

      - name: Configure Nexus Repository (via REST API)
        run: |
          # First, create a Docker hosted repository via Nexus REST API
          curl -X POST "https://2dfc-197-20-41-204.ngrok-free.app/service/rest/v1/repositories/docker/hosted" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            -u admin:c40eebf3-c9c0-405b-8334-fc9201a626bf \
            -d '{
              "name": "docker-hosted",
              "online": true,
              "storage": {
                "blobStoreName": "default",
                "strictContentTypeValidation": true,
                "writePolicy": "ALLOW_ONCE"
              },
              "cleanup": {
                "policyNames": []
              },
              "docker": {
                "v1Enabled": false,
                "forceBasicAuth": false,
                "httpPort": 8082
              }
            }' || echo "Repository may already exist"
      
      - name: Tag Docker Images for Nexus
        run: |
          # Use version from file
          VERSION="${{ steps.get-version.outputs.version }}"
          echo "Using version from file: $VERSION"
          
          # Log in to Docker Hub again to ensure authentication
          echo "cindaa123." | docker login -u "$DOCKER_USERNAME" --password-stdin
          
          # Check if images exist and pull, or build if needed
          for IMAGE in "$DOCKER_REPO_BACKEND" "$DOCKER_REPO_FRONTEND" "$DOCKER_REPO_FLASK"; do
            echo "Processing image: $DOCKER_USERNAME/$IMAGE:$VERSION"
            
            # Try to pull the image
            if docker pull "$DOCKER_USERNAME/$IMAGE:$VERSION"; then
              echo "Successfully pulled $DOCKER_USERNAME/$IMAGE:$VERSION"
              
              # Tag for Nexus using the port specified in the repository config
              docker tag "$DOCKER_USERNAME/$IMAGE:$VERSION" "2dfc-197-20-41-204.ngrok-free.app:8082/docker-hosted/$IMAGE:$VERSION"
            else
              echo "Warning: Could not pull $DOCKER_USERNAME/$IMAGE:$VERSION"
            fi
          done
      
      - name: Attempt Different Login Methods to Nexus
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # Try multiple login formats
          echo "c40eebf3-c9c0-405b-8334-fc9201a626bf" | docker login 2dfc-197-20-41-204.ngrok-free.app:8082 -u admin --password-stdin || echo "Login failed with port 8082"
          
          echo "c40eebf3-c9c0-405b-8334-fc9201a626bf" | docker login 2dfc-197-20-41-204.ngrok-free.app -u admin --password-stdin || echo "Login failed without port"
      
      - name: Attempt to Push Images to Nexus
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # Try multiple push formats
          for IMAGE in "$DOCKER_REPO_BACKEND" "$DOCKER_REPO_FRONTEND" "$DOCKER_REPO_FLASK"; do
            echo "Attempting to push $IMAGE to Nexus..."
            
            docker push "2dfc-197-20-41-204.ngrok-free.app:8082/docker-hosted/$IMAGE:$VERSION" || echo "Failed to push with port 8082"
          done

      - name: Notify Deployment Ready
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          echo "Les images Docker sont prêtes à être déployées avec la version $VERSION:"
          echo "Docker Hub:"
          echo "Backend: sinda12/sustainafood-backend:$VERSION"
          echo "Frontend: sinda12/sustainafood-frontend:$VERSION"
          echo "Flask: sinda12/sustainafood-flask:$VERSION"
          echo ""
          echo "Nexus Repository (si la connexion a réussi):"
          echo "Backend: 2dfc-197-20-41-204.ngrok-free.app:8082/docker-hosted/sustainafood-backend:$VERSION"
          echo "Frontend: 2dfc-197-20-41-204.ngrok-free.app:8082/docker-hosted/sustainafood-frontend:$VERSION"
          echo "Flask: 2dfc-197-20-41-204.ngrok-free.app:8082/docker-hosted/sustainafood-flask:$VERSION"